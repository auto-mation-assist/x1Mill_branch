# x1 Probing gui interface - My notes - for verser file conversion use
# can likely use search and replace if carefull for each item
# that needs to be changed in the lower part of this note

# to get a input value,
offset_x= (self.w.input_adj_x.text())

# to set a status label,
self.w.status_xm.setText(offset_x)

# to read a status label,
status_1=(self.w.status_xm.text())

----------------------------------
# to get button booleen status,
     self.w.pbtn_allow_auto_zero.isChecked():
       Do something
    else:
       Do This 
----------------------------------


# x1Probe
# to "read" user inputs. only 0-9 and . inputs are in unicode
# =====================================================================
    probe_diam         "value" = float(self.w.input_probe_diam.text()) )
    max_travel         "value" = float(self.w.input_max_travel.text())
    latch_return_dist  "value" = float(self.w.input_latch_return_dist.text())
    search_vel         "value" = float(self.w.input_search_vel.text())
    probe_vel          "value" = float(self.w.input_probe_vel.text())
    side_edge_lenght   "value" = float(self.w.input_side_edge_lenght.text())
    xy_clearances      "value" = float(self.w.input_xy_clearances.text())
    z_clearance        "value" = float(self.w.input_z_clearance.text())

    offset_x           "value" = float(self.w.input_adj_x.text()) 
    offset_y           "value" = float(self.w.input_adj_y.text()) 
    offset_z           "value" = float(self.w.input_adj_z.text())
    offset_angle       "value" = float(self.w.input_adj_angle.text()) 

# to "set"  user input values
# ================================================ 
    probe_diam        = self.w.input_probe_diam.setText("value") 
    max_travel        = self.w.input_max_travel.setText("value")
    latch_return_dist = self.w.input_latch_return_dist.setText("value")
    search_vel        = self.w.input_search_vel.setText("value")
    probe_vel         = self.w.input_probe_vel.setText("value")
    side_edge_lenght  = self.w.input_side_edge_lenght.setText("value")
    xy_clearances     = self.w.input_xy_clearances.setText("value")
    z_clearance       = self.w.input_z_clearance.setText("value")

    offset_x          = self.w.input_adj_x.setText("value")  
    offset_y          = self.w.input_adj_y.setText("value")   
    offset_z          = self.w.input_adj_z.setText("value")
    offset_angle      = self.w.input_adj_angle.setText("value") 

# status labels     buttons                    read values
# ========================================================================================== 
    X Neg  =  status_xm_setText(self):         "value" = float(self.w.status_xm.text())
    X Cent =  status_xc_setText(self):         "value" = float(self.w.status_xc.text())
    X Pos  =  status_xp_setText(self):         "value" = float(self.w.status_xp.text())
    Len X  =  status_lx_setText(self):         "value" = float(self.w.status_lx.text())

    Y Neg  =  status_ym_setText(self):         "value" = float(self.w.status_ym.text())
    Y Cent =  status_yc_setText(self):         "value" = float(self.w.status_yc.text())
    Y Pos  =  status_yp_setText(self):         "value" = float(self.w.status_yp.text())
    Len Y  =  status_ly_setText(self):         "value" = float(self.w.status_ly.text())

           =  status_not_used_setText(self):   "value" = float(self.w.status_not_used.text())
    Z      =  status_z_setText(self):          "value" = float(self.w.status_z.text())
    Diam   =  status_d_setText(self):          "value" = float(self.w.status_d.text())
    Angle  =  status_a_setText(self):          "value" = float(self.w.status_a.text())   

# status labels     buttons                    set values
# ========================================================================================== 
    X Neg  =  status_xm_setText(self):         self.w.status_xm.setText("value")
    X Cent =  status_xc_setText(self):         self.w.status_xc.setText("value")
    X Pos  =  status_xp_setText(self):         self.w.status_xp.setText("value")
    Len X  =  status_lx_setText(self):         self.w.status_lx.setText("value")

    Y Neg  =  status_ym_setText(self):         self.w.status_ym.setText("value")
    Y Cent =  status_yc_setText(self):         self.w.status_yc.setText("value")
    Y Pos  =  status_yp_setText(self):         self.w.status_yp.setText("value")
    Len Y  =  status_ly_setText(self):         self.w.status_ly.setText("value")

           =  status_not_used_setText(self):   self.w.status_not_used.setText("value")
    Z      =  status_z_setText(self):          self.w.status_z.setText("value")
    Diam   =  status_d_setText(self):          self.w.status_d.setText("value")
    Angle  =  status_a_setText(self):          self.w.status_a.setText("value")

# end # x1Probe
# =========================================================================================================



# Verser file conversion name change lists
#    Old names                                                    New names
# =========================================================================================================
  self.command = linuxcnc.command()                               self.cmnd = linuxcnc.command()
  self.command.                                                   self.cmnd.

  on_xpym_released(self, gtkbutton, data = None):                 pbtn_outside_xpym_released()
  on_ym_released(self, gtkbutton, data = None):                   pbtn_outside_ym_released()
  on_xmym_released(self, gtkbutton, data = None):                 pbtn_outside_xmym_released()
  on_xp_released(self, gtkbutton, data = None):                   pbtn_outside_xp_released()
  on_xy_center_released(self, gtkbutton, data = None):            pbtn_outside_center_released()
  on_xm_released(self, gtkbutton, data = None):                   pbtn_outside_xm_released()
  on_xpyp_released(self, gtkbutton, data = None):                 pbtn_outside_xpyp_released()
  on_yp_released(self, gtkbutton, data = None):                   pbtn_outside_yp_released()
  on_xmyp_released(self, gtkbutton, data = None):                 pbtn_outside_xmyp_released()

  on_xmyp1_released(self, gtkbutton, data = None):                pbtn_inside_xmyp_released()
  on_xpyp1_released(self, gtkbutton, data = None):                pbtn_inside_xpyp_released()
  on_xy_hole_released(self, gtkbutton, data = None):              pbtn_inside_xy_hole_released()
  on_xmym1_released(self, gtkbutton, data = None):                pbtn_inside_xmym_released()
  on_xpym1_released(self, gtkbutton, data = None):                pbtn_inside_xpym_released()

  on_angle_xp_released(self, gtkbutton, data = None):             pbtn_skew_xp_released()
  on_angle_ym_released(self, gtkbutton, data = None):             pbtn_skew_ym_released()
  on_angle_yp_released(self, gtkbutton, data = None):             pbtn_skew_yp_released()
  on_angle_xm_released(self, gtkbutton, data = None):             pbtn_skew_xm_released()

  on_down_released(self, gtkbutton, data = None):                 pbtn_down_released()
 
  on_chk_set_zero_toggled( self, gtkcheckbutton, data = None ):   pbtn_allow_auto_zero_toggle()
  on_chk_auto_rott_toggled( self, gtkcheckbutton, data = None ):  pbtn_allow_auto_skew_toggle()

  on_btn1_set_x_released(self, gtkbutton, data = None):           pbtn_set_x_released() 
  on_btn1_set_y_released(self, gtkbutton, data = None):           pbtn_set_y_released()
  on_btn1_set_z_released(self, gtkbutton, data = None):           pbtn_set_z_released()
  on_btn1_set_angle_released(self, gtkbutton, data = None):       pbtn_set_angle_released()


# These value entries can be removed for the rotating spin buttons - they are not used anymore
# ============================================================================================
#  on_spbtn_offs_x_key_press_event( self, gtkspinbutton, data = None ):
#  on_spbtn_offs_y_key_press_event( self, gtkspinbutton, data = None ):
#  on_spbtn_offs_z_key_press_event( self, gtkspinbutton, data = None ):
#  on_spbtn_offs_angle_key_press_event( self, gtkspinbutton, data = None ):
#
#  on_spbtn1_search_vel_key_press_event( self, gtkspinbutton, data = None ):
#  on_spbtn1_probe_vel_key_press_event( self, gtkspinbutton, data = None ):
#  on_spbtn1_probe_max_key_press_event( self, gtkspinbutton, data = None ):
#  on_spbtn1_probe_latch_key_press_event( self, gtkspinbutton, data = None ):
#  on_spbtn1_probe_diam_key_press_event( self, gtkspinbutton, data = None ):
#  on_spbtn1_xy_clearance_key_press_event( self, gtkspinbutton, data = None ):
#  on_spbtn1_edge_lenght_key_press_event( self, gtkspinbutton, data = None ):
#  on_spbtn1_z_clearance_key_press_event( self, gtkspinbutton, data = None ):
# ============================================================================================


# user value entry
# Old                                                                        New
# ========================================================================================================
  on_spbtn_offs_x_value_changed( self, gtkspinbutton, data = None ):         input_adj_x_enter()
  on_spbtn_offs_y_value_changed( self, gtkspinbutton, data = None ):         input_adj_y_enter()
  on_spbtn_offs_z_value_changed( self, gtkspinbutton, data = None ):         input_adj_z_enter()
  on_spbtn_offs_angle_value_changed( self, gtkspinbutton, data = None ):     input_adj_angle_enter()

  on_spbtn1_probe_diam_value_changed( self, gtkspinbutton, data = None ):    input_probe_diam_enter()
  on_spbtn1_probe_max_value_changed( self, gtkspinbutton, data = None ):     input_max_travel_enter()
  on_spbtn1_probe_latch_value_changed( self, gtkspinbutton, data = None ):   input_latch_return_dist_enter()
  on_spbtn1_search_vel_key_press_event( self, gtkspinbutton, data = None ):  input_search_vel_enter()
  on_spbtn1_probe_vel_value_changed( self, gtkspinbutton, data = None ):     input_probe_vel_enter()
  on_spbtn1_edge_lenght_value_changed( self, gtkspinbutton, data = None ):   input_side_edge_lenght_enter()
  on_spbtn1_xy_clearance_value_changed( self, gtkspinbutton, data = None ):  input_xy_clearances_enter()
  on_spbtn1_z_clearance_value_changed( self, gtkspinbutton, data = None ):   input_z_clearance_enter()

# see the bottom list for new names for these
# new lab   New button           Old set text                 Old get text                  Old set value                           
# ================================================================================================================================
  X Neg  =  status_xm_setText()  self.lb_probe_xm.set_text(   self.lb_probe_xm.get_text()   xm = float(self.lb_probe_xm.get_text()
  X Cent =  status_xc_setText()  self.lb_probe_xc.set_text(  
  X Pos  =  status_xp_setText()  self.lb_probe_xp.set_text(   self.lb_probe_xp.get_text()   xp = float(self.lb_probe_xp.get_text() 
  Len X  =  status_lx_setText()  self.lb_probe_lx.set_text(

  Y Neg  =  status_ym_setText()  self.lb_probe_ym.set_text(   self.lb_probe_ym.get_text()   ym = float(self.lb_probe_ym.get_text() 
  Y Cent =  status_yc_setText()  self.lb_probe_yc.set_text(
  Y Pos  =  status_yp_setText()  self.lb_probe_yp.set_text(   self.lb_probe_yp.get_text()   yp = float(self.lb_probe_yp.get_text()
  Len Y  =  status_ly_setText()  self.lb_probe_ly.set_text(

         =  --                   --  
  Z      =  status_z_setText()   self.lb_probe_z.set_text(
  Diam   =  status_d_setText()   self.lb_probe_d.set_text(
  Angle  =  status_a_setText()   self.lb_probe_a.set_text(

 
# for the above lists - new names for status lables
# status labels     buttons                    read values                                    set value
# ================================================================================================================================ 
  X Neg  =  status_xm_setText(self):        "value" = float(self.w.status_xm.text())        self.w.status_xm.setText("value")
  X Cent =  status_xc_setText(self):        "value" = float(self.w.status_xc.text())        self.w.status_xc.setText("value") 
  X Pos  =  status_xp_setText(self):        "value" = float(self.w.status_xp.text())        self.w.status_xp.setText("value")
  Len X  =  status_lx_setText(self):        "value" = float(self.w.status_lx.text())        self.w.status_lx.setText("value")

  Y Neg  =  status_ym_setText(self):        "value" = float(self.w.status_ym.text())        self.w.status_ym.setText("value")
  Y Cent =  status_yc_setText(self):        "value" = float(self.w.status_yc.text())        self.w.status_yc.setText("value")
  Y Pos  =  status_yp_setText(self):        "value" = float(self.w.status_yp.text())        self.w.status_yp.setText("value")
  Len Y  =  status_ly_setText(self):        "value" = float(self.w.status_ly.text())        self.w.status_ly.setText("value")

         =  status_not_used_setText(self):  "value" = float(self.w.status_not_used.text())  self.w.status_not_used.setText("value")
  Z      =  status_z_setText(self):         "value" = float(self.w.status_z.text())         self.w.status_z.setText("value")
  Diam   =  status_d_setText(self):         "value" = float(self.w.status_d.text())         self.w.status_d.setText("value")
  Angle  =  status_a_setText(self):         "value" = float(self.w.status_a.text())         self.w.status_a.setText("value")











































